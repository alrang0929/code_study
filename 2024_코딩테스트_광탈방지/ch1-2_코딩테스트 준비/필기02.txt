[알고리즘을 잘 공부하는 법]

1. 문제 풀 떄 중요한것
    1) 문제 풀이는 여러가지! 명심하자
    2) 항상 예외가 있을 수 있다!
    3) 내 풀이가 베스트인가?
    4) 시행착오를 기록하라
    5) 다른 사람의 코드를 많이 보자! 배울점 있음!
    6) 쉽게 포기하지 말자..ㅠㅠ 모르겠다면 답을 보자!

2. 그나마 재밌게 공부하는 것
1) 시각적 사이트 도움을 받자
2) 공부하는 자료구조/알고리즘이 어디에 쓰일지 생각하며 공부

2. 마음가짐
    1) 마스터 까지는 할 필요x
        -기초능력을 확인하고 싶을 뿐
        - 대회용 알그리즘 출제X,  코딩능력과 논리적 사고가 
            중요한 문제를 출제
        -but 알고리즘이 중요한 회사라면 공부 ㄱㄱ
    2) 어디까지 공부할지 정하고 ㄱ


3. 코딩테스트를 잘 보는 법
    1) 자신의 성향 파악
        - 나의 타입은?
            ㄴ 미리 생각하고 의사 코드를 작성해야 잘되냐
            ㄴ 일단 코드를 작성하며 생각해야 잘 풀리냐
    2) 메모하기
        - 긴장하며 풀다가 뭐하려고 했는지 까먹을 수 있음
        -코드에 주석을 달거나 노트에 메모하기
        - 순서도 그리기!
    3) 디버깅은 필수
        - 내가 예상한 대로 동작이 안된다면 꼭 디버깅을 하자
        - 로직 중간에 console.log를 사용하여 값 확인
        - 외부 IDE가 사용가능 하자면 Node.js 디버그 모드 사용하자

    4) 익숙해지자.. :D
        1) 문제를 읽는 것에 익숙해져야한다.
            ㄴ 지문에 잡다한 정보 多, 핵심만 골라내는 능력 길러야
        2) 시간복잡도를 계산하는 것에 익숙해져야 한다
            ㄴ 자잘자잘한 성능보다 시간 복잡도가 더 중요!
        3) 엣지 케이스 중요!
    
4. 좋은 코드를 만드는 원칙
    1) 변수, 함수의 이름을 올바르게 정했는가?
    2) 중복코드 제거했는가?
    3) 함수형 프로그래밍도 좋은 방법
        map, filter, reduce 같은 고차함수 이용하기

5. 가지치기를 했는가?
6. 자바스크립트를 잘 이용했는가
 1) 구조분해할당
 2) Spread 오퍼레이터

7. 일관성을 유지했는가
    안좋은 케이스:
    - ex: var let 혼용
    - snake_case와 camelCase를 혼용
    - 변수명, 함수명을 줄임말로 쓰다가 갑자기 풀네임으로 쓰는 경우
    ㄴ 제출하기 전 꼭 확인

    but 코드를 안보는 코딩이라면 과감하게 ㄱㄱ

    