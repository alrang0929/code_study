# 파이썬에서의 함수는 def 라는 예약어로 선언
'''
def 함수이름 (매개변수):
    a=1
    return "결과값으로 반환할 것"
'''

# def add (x, y):
#     return x+y
# sum = add(10,2)
# # sum = add(y= 10,x=2)
# # 이렇게 키워드에 매칭을 시켜서 매개변수를 전달할 경우 위치를 고려하지 않고 바로 해당 key를 가진 값에 전달한다
# # sum = add(y= 10,2) : 위치무시, 뒤는 위치로 전달해야됨.. 어떻게함?
# # 혼용해서 쓸 때는 무조건 위치를 우선적으로, 그 후에 키워드 매칭 : sum = add(2,y=10)
# print(sum)


######매개변수 선언 ############################
'''
- 콤마(`,`)를 기준으로 복수개의 매개변수를 전달 받을 수 있다
- 위치 혹은 키워드에 따라 매개변수를 전달할 수 있다
- 특수 매개변수를 활용하여 위치의 강제, 혹은 키워드의 강제가 가능하다
    - 키워드 및 위치를 기준으로 매개변수 전달 가능 (우선순위: 위치 —> 키워드)
    - `/`: 해당 매개변수 앞에 선언된 매개변수는 오직 위치로 전달
    - `*`: 해당 매개변수 뒤에 선언된 매개변수는 오직 키워드로 전달
'''

# def pass_by_default (a, b):
#     print(a, b)

# def pass_by_pos (a, b, /):
#     # /은 /앞에 오는 매개변수들이 무조건 위치를 기반해서 왔음 좋겠다, 키워드 전달 X
#     print(a, b)

# def pass_by_kwrg (*, a, b):
#     print(a, b)
# # * 뒤에 위치하는 매개변수는 무조건 키워드로 전달
    
# # pass_by_kwrg(a=1, b=1)
# # pass_by_default(1, 2)
# pass_by_default(b=1, a=2);


# Python 함수의 매개변수의 전달은 Call by Assignment 방식!

'''
- `immutable` 성격의 값은 Call by Value
- `mutable` 성격의 값은 Call by Reference
'''

def test(a,b):
    a = "b c d"
    b = [1,2,3] #여기서 y와 연결된 연결성이 끊어진다
    b[0] = "a"
    
x = "abc"
y = ["a", "b", "c"]
test(x,y) #값 복사X, 동일한 값이 든 메모리를 바라보고 있음
# immutable : int, 블린 값, 문자값 등 수정 불가한 값
# a 같은 경우 기존 값을 지우고 새로운 문자열을 메모리에 생성하고 a가 그걸 가리키게함 = call by value
# 배열은? mutable하다, 즉 수정이 가능하다! 따라서 결과를 보면 새로 생성한게 아닌 배열의 첫번째만 1로 덮어쓴 것

print(x,y) #abc [1, 'b', 'c']

########################################################

# 재귀: 함수가 자기 자신을 호출하는 것
'''
- 재귀 함수의 구성요소
    - 기저 조건 (Base Case)
    - 재귀 호출
'''

# 팩토리얼 계산이란?
# n! = n*(n-1)*(n-2)....

def factorial(n):
    if n == 1:
        return 1 #이게 기저 조건
    return n * factorial(n-1) #이게 재귀호출

factorial(5)